import Head from 'next/head'
import dynamic from 'next/dynamic'
import { useEffect, useState } from 'react'
import pageAuth from '@/utilities/pageAuth'
import { useAppDispatch, useAppSelector } from '@/states/hooks'
import { createPatient, deletePatient, getPatients, updatePatient } from '@/states/patient/actions'
import { authSelector, patientSelector } from '@/states/selectors'
import useModalFormConfig from '@/hooks/useModalFormConfig'
import validateMessages from '@/utilities/validateFormMessages'
import Select, {SelectOption} from '@/components/select'
import styles from '@/styles/patient.module.scss'
import Form from 'antd/lib/form'
// import { getProcedures } from '@/states/procedure'
import message from '@/utilities/message'

import PrivateLayout from "@/components/layout/private"

const Button = dynamic(() => import('@/components/button'))
const FormModal = dynamic(() => import('@/components/pages/patient/formModal'))
const PatientCards = dynamic(() => import('@/components/pages/patient/cards'))
const Title = dynamic(() => import('antd/lib/typography/Title'))
const Text = dynamic(() => import('antd/lib/typography/Text'))

export default function Patients() {

  const dispatch                                           = useAppDispatch()
  const {data: patientsData, isPending}                    = useAppSelector(patientSelector)
  // const { data: procedures, isPending : isProceduresLoading } = useAppSelector(procedureSelector)
  const { loggedData }    = useAppSelector(authSelector)
  const [form]                                             = Form.useForm()
  const { isModalVisible, actionType, selected,
  setModalFormStateConfig, openFormModal, closeFormModal } = useModalFormConfig(form)
  const [selectedSortOption, setSelectedSortOption]        = useState<any>(null)

  const clinic_id = loggedData?.user?.clinic_id
  const branch_id = loggedData?.user?.branch_id

  useEffect(() => { dispatch(getPatients(clinic_id)) }, [dispatch, clinic_id])
  // useEffect(() => { dispatch(getProcedures({clinic_id})) }, [dispatch, clinic_id])
  function dataSource(){

    const withSortOrNone = ![undefined, null].includes(selectedSortOption) ? [...patientsData]?.sort((a: any, c:any) => a[selectedSortOption].localeCompare(c[selectedSortOption])) : patientsData
    return withSortOrNone
  }

  const onCreateOrUpdatePatient = (patient: any) => { 

    if (actionType === 'create') {
      dispatch( createPatient({patient: {...patient, clinic_role: 'patient', clinic_id, branch_id}, closeFormModal, message}))
    }
 
   if (actionType === 'edit') {
     dispatch(updatePatient({patient, patientId: selected.id, closeFormModal, message}) )
   }

  }

  const openEditPatientModal = (patient : any) => (value : any) => {

    setModalFormStateConfig(() => ({
      isModalVisible: true,
      actionType: 'edit',
      selected: patient
    }))

    form.setFieldsValue(patient)

  }

  const onDelete = (id : number) => () => {
    dispatch(deletePatient({ payload: {id}, message}))
  }

  const modalOptions = {
    visible: isModalVisible,
    title: `${actionType === 'edit' ? 'Edit' : actionType === 'delete' ? 'Delete' : 'New' } Patient`,
    mask: false,
    width: 700,
    closable: true,
    // forceRender: true,
    getContainer: false,
    okText: 'Save',
    onCancel: closeFormModal,
    onOk: form.submit,
  }

  const formOptions: any = {
    id: 'form-patient',
    autoComplete: 'off',
    layout: 'vertical',
    className: 'form2Column',
    requiredMark: false,
    validateMessages: validateMessages,
    form,
    onFinish: onCreateOrUpdatePatient,
  }

  const sortOptions = ['first_name', 'last_name', 'date_joined']


  const onSort = (value : any) => {
    setSelectedSortOption(value)
  }

  return (
    <>
    <Head>
      <title>Client - App</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/logo.png" />
    </Head>

    <main className={styles._}>
    <Title className={styles.title}>Patients</Title>
    <Button className={styles.btn_add_new_patient} type='primary' onClick={openFormModal}>Add New</Button>
    <div className={styles.filter}>


      {/* <Text className={styles.label}>Filter</Text>
      <div className={styles.procedure_inner}>
      <Text className={styles.label}>Procedure:</Text>
      <Select
      className={styles.select}
      placeholder='All'
      style={{ width: 200 }}
      // onChange={selectFilter('dentist')}
      canSearch={true}
      allowClear={true}
      >
      {procedures.map((procedure : any) =>  (
      <SelectOption key={procedure.id} value={procedure.id}>{procedure.name}</SelectOption>
      ))}
      </Select>
      </div> */}
    </div>
    <div className={styles.sort}>

      <Text className={styles.label}>Sort By</Text>
      <Select
      className={styles.select}
      placeholder='Default'
      style={{ width: 120 }}
      onChange={onSort}
      canSearch={true}
      allowClear={true}
      >
      {sortOptions.map((option : any) =>  (
      <SelectOption key={option} value={option}>{option.replace('_', ' ')}</SelectOption>
      ))}
      </Select>
    </div>
   
    <PatientCards styles={styles} patients={dataSource()} openEditPatientModal={openEditPatientModal} onDelete={onDelete}/>
    
  </main>

  {isModalVisible && 
        <FormModal
          modalOptions={modalOptions}
          formOptions={formOptions}
          others={{ isPending, actionType}}
        />
      }
  </>
  )
}

// Patients.getLayout = function PageLayout(page: JSX.Element)  {
//   return <PrivateLayout>{page}</PrivateLayout>
// }

export const getServerSideProps = pageAuth()